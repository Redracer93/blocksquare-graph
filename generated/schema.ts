// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CertifiedPartner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CertifiedPartner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CertifiedPartner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CertifiedPartner", id.toString(), this);
    }
  }

  static load(id: string): CertifiedPartner | null {
    return changetype<CertifiedPartner | null>(
      store.get("CertifiedPartner", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get wallets(): Array<string> | null {
    let value = this.get("wallets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set wallets(value: Array<string> | null) {
    if (!value) {
      this.unset("wallets");
    } else {
      this.set("wallets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get whitelisted(): Array<string> | null {
    let value = this.get("whitelisted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set whitelisted(value: Array<string> | null) {
    if (!value) {
      this.unset("whitelisted");
    } else {
      this.set("whitelisted", Value.fromStringArray(<Array<string>>value));
    }
  }

  get properties(): Array<string> | null {
    let value = this.get("properties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set properties(value: Array<string> | null) {
    if (!value) {
      this.unset("properties");
    } else {
      this.set("properties", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pendingRents(): Array<string> | null {
    let value = this.get("pendingRents");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pendingRents(value: Array<string> | null) {
    if (!value) {
      this.unset("pendingRents");
    } else {
      this.set("pendingRents", Value.fromStringArray(<Array<string>>value));
    }
  }

  get wallets(): Array<string> | null {
    let value = this.get("wallets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set wallets(value: Array<string> | null) {
    if (!value) {
      this.unset("wallets");
    } else {
      this.set("wallets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get cps(): Array<string> | null {
    let value = this.get("cps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set cps(value: Array<string> | null) {
    if (!value) {
      this.unset("cps");
    } else {
      this.set("cps", Value.fromStringArray(<Array<string>>value));
    }
  }

  get properties(): Array<string> | null {
    let value = this.get("properties");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set properties(value: Array<string> | null) {
    if (!value) {
      this.unset("properties");
    } else {
      this.set("properties", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class UserCertifiedPartner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("cp", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserCertifiedPartner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserCertifiedPartner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserCertifiedPartner", id.toString(), this);
    }
  }

  static load(id: string): UserCertifiedPartner | null {
    return changetype<UserCertifiedPartner | null>(
      store.get("UserCertifiedPartner", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get cp(): string {
    let value = this.get("cp");
    return value!.toString();
  }

  set cp(value: string) {
    this.set("cp", Value.fromString(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Wallet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Wallet", id.toString(), this);
    }
  }

  static load(id: string): Wallet | null {
    return changetype<Wallet | null>(store.get("Wallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cp(): string | null {
    let value = this.get("cp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set cp(value: string | null) {
    if (!value) {
      this.unset("cp");
    } else {
      this.set("cp", Value.fromString(<string>value));
    }
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }

  get investments(): Array<string> | null {
    let value = this.get("investments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set investments(value: Array<string> | null) {
    if (!value) {
      this.unset("investments");
    } else {
      this.set("investments", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Property extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token", Value.fromString(""));
    this.set("tokenValuation", Value.fromBigInt(BigInt.zero()));
    this.set("propertyValuation", Value.fromBigInt(BigInt.zero()));
    this.set("propertyValuationCurrency", Value.fromString(""));
    this.set("streetLocation", Value.fromString(""));
    this.set("geoLocation", Value.fromString(""));
    this.set("parcelNumber", Value.fromString(""));
    this.set("kadastralMunicipality", Value.fromString(""));
    this.set("buildingPart", Value.fromBigInt(BigInt.zero()));
    this.set("propertyType", Value.fromString(""));
    this.set("ipfs", Value.fromString(""));
    this.set("createdAt", Value.fromBigInt(BigInt.zero()));
    this.set("createdAtBlock", Value.fromBigInt(BigInt.zero()));
    this.set("cp", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Property entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Property entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Property", id.toString(), this);
    }
  }

  static load(id: string): Property | null {
    return changetype<Property | null>(store.get("Property", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenValuation(): BigInt {
    let value = this.get("tokenValuation");
    return value!.toBigInt();
  }

  set tokenValuation(value: BigInt) {
    this.set("tokenValuation", Value.fromBigInt(value));
  }

  get propertyValuation(): BigInt {
    let value = this.get("propertyValuation");
    return value!.toBigInt();
  }

  set propertyValuation(value: BigInt) {
    this.set("propertyValuation", Value.fromBigInt(value));
  }

  get propertyValuationCurrency(): string {
    let value = this.get("propertyValuationCurrency");
    return value!.toString();
  }

  set propertyValuationCurrency(value: string) {
    this.set("propertyValuationCurrency", Value.fromString(value));
  }

  get streetLocation(): string {
    let value = this.get("streetLocation");
    return value!.toString();
  }

  set streetLocation(value: string) {
    this.set("streetLocation", Value.fromString(value));
  }

  get geoLocation(): string {
    let value = this.get("geoLocation");
    return value!.toString();
  }

  set geoLocation(value: string) {
    this.set("geoLocation", Value.fromString(value));
  }

  get parcelNumber(): string {
    let value = this.get("parcelNumber");
    return value!.toString();
  }

  set parcelNumber(value: string) {
    this.set("parcelNumber", Value.fromString(value));
  }

  get kadastralMunicipality(): string {
    let value = this.get("kadastralMunicipality");
    return value!.toString();
  }

  set kadastralMunicipality(value: string) {
    this.set("kadastralMunicipality", Value.fromString(value));
  }

  get buildingPart(): BigInt {
    let value = this.get("buildingPart");
    return value!.toBigInt();
  }

  set buildingPart(value: BigInt) {
    this.set("buildingPart", Value.fromBigInt(value));
  }

  get propertyType(): string {
    let value = this.get("propertyType");
    return value!.toString();
  }

  set propertyType(value: string) {
    this.set("propertyType", Value.fromString(value));
  }

  get ipfs(): string {
    let value = this.get("ipfs");
    return value!.toString();
  }

  set ipfs(value: string) {
    this.set("ipfs", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get createdAtBlock(): BigInt {
    let value = this.get("createdAtBlock");
    return value!.toBigInt();
  }

  set createdAtBlock(value: BigInt) {
    this.set("createdAtBlock", Value.fromBigInt(value));
  }

  get capitalStacks(): Array<string> | null {
    let value = this.get("capitalStacks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set capitalStacks(value: Array<string> | null) {
    if (!value) {
      this.unset("capitalStacks");
    } else {
      this.set("capitalStacks", Value.fromStringArray(<Array<string>>value));
    }
  }

  get investments(): Array<string> | null {
    let value = this.get("investments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set investments(value: Array<string> | null) {
    if (!value) {
      this.unset("investments");
    } else {
      this.set("investments", Value.fromStringArray(<Array<string>>value));
    }
  }

  get holders(): Array<string> | null {
    let value = this.get("holders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holders(value: Array<string> | null) {
    if (!value) {
      this.unset("holders");
    } else {
      this.set("holders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get pendingRents(): Array<string> | null {
    let value = this.get("pendingRents");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pendingRents(value: Array<string> | null) {
    if (!value) {
      this.unset("pendingRents");
    } else {
      this.set("pendingRents", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offering(): string | null {
    let value = this.get("offering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offering(value: string | null) {
    if (!value) {
      this.unset("offering");
    } else {
      this.set("offering", Value.fromString(<string>value));
    }
  }

  get cp(): string {
    let value = this.get("cp");
    return value!.toString();
  }

  set cp(value: string) {
    this.set("cp", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("totalTransfers", Value.fromBigInt(BigInt.zero()));
    this.set("totalHolders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get totalTransfers(): BigInt {
    let value = this.get("totalTransfers");
    return value!.toBigInt();
  }

  set totalTransfers(value: BigInt) {
    this.set("totalTransfers", Value.fromBigInt(value));
  }

  get totalHolders(): BigInt {
    let value = this.get("totalHolders");
    return value!.toBigInt();
  }

  set totalHolders(value: BigInt) {
    this.set("totalHolders", Value.fromBigInt(value));
  }
}

export class PropertyCapitalStack extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("property", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("cap", Value.fromBigInt(BigInt.zero()));
    this.set("commonEquity", Value.fromBigInt(BigInt.zero()));
    this.set("preferredEquity", Value.fromBigInt(BigInt.zero()));
    this.set("mezzanine", Value.fromBigInt(BigInt.zero()));
    this.set("juniorDebt", Value.fromBigInt(BigInt.zero()));
    this.set("seniorDebt", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyCapitalStack entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PropertyCapitalStack entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PropertyCapitalStack", id.toString(), this);
    }
  }

  static load(id: string): PropertyCapitalStack | null {
    return changetype<PropertyCapitalStack | null>(
      store.get("PropertyCapitalStack", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get property(): string {
    let value = this.get("property");
    return value!.toString();
  }

  set property(value: string) {
    this.set("property", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get cap(): BigInt {
    let value = this.get("cap");
    return value!.toBigInt();
  }

  set cap(value: BigInt) {
    this.set("cap", Value.fromBigInt(value));
  }

  get commonEquity(): BigInt {
    let value = this.get("commonEquity");
    return value!.toBigInt();
  }

  set commonEquity(value: BigInt) {
    this.set("commonEquity", Value.fromBigInt(value));
  }

  get preferredEquity(): BigInt {
    let value = this.get("preferredEquity");
    return value!.toBigInt();
  }

  set preferredEquity(value: BigInt) {
    this.set("preferredEquity", Value.fromBigInt(value));
  }

  get mezzanine(): BigInt {
    let value = this.get("mezzanine");
    return value!.toBigInt();
  }

  set mezzanine(value: BigInt) {
    this.set("mezzanine", Value.fromBigInt(value));
  }

  get juniorDebt(): BigInt {
    let value = this.get("juniorDebt");
    return value!.toBigInt();
  }

  set juniorDebt(value: BigInt) {
    this.set("juniorDebt", Value.fromBigInt(value));
  }

  get seniorDebt(): BigInt {
    let value = this.get("seniorDebt");
    return value!.toBigInt();
  }

  set seniorDebt(value: BigInt) {
    this.set("seniorDebt", Value.fromBigInt(value));
  }
}

export class PropertyInvestment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("property", Value.fromString(""));
    this.set("wallet", Value.fromString(""));
    this.set("investmentToken", Value.fromString(""));
    this.set("amountInvested", Value.fromBigInt(BigInt.zero()));
    this.set("amountReceived", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyInvestment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PropertyInvestment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PropertyInvestment", id.toString(), this);
    }
  }

  static load(id: string): PropertyInvestment | null {
    return changetype<PropertyInvestment | null>(
      store.get("PropertyInvestment", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get property(): string {
    let value = this.get("property");
    return value!.toString();
  }

  set property(value: string) {
    this.set("property", Value.fromString(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    return value!.toString();
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get investmentToken(): string {
    let value = this.get("investmentToken");
    return value!.toString();
  }

  set investmentToken(value: string) {
    this.set("investmentToken", Value.fromString(value));
  }

  get amountInvested(): BigInt {
    let value = this.get("amountInvested");
    return value!.toBigInt();
  }

  set amountInvested(value: BigInt) {
    this.set("amountInvested", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value!.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }
}

export class PropertyOffering extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("property", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("softCap", Value.fromBigInt(BigInt.zero()));
    this.set("presaleMaxInvestment", Value.fromBigInt(BigInt.zero()));
    this.set("presaleMinInvestment", Value.fromBigInt(BigInt.zero()));
    this.set("maxInvestment", Value.fromBigInt(BigInt.zero()));
    this.set("minInvestment", Value.fromBigInt(BigInt.zero()));
    this.set("presaleStart", Value.fromBigInt(BigInt.zero()));
    this.set("presaleEnd", Value.fromBigInt(BigInt.zero()));
    this.set("saleStart", Value.fromBigInt(BigInt.zero()));
    this.set("saleEnd", Value.fromBigInt(BigInt.zero()));
    this.set("investmentToken", Value.fromString(""));
    this.set("collector", Value.fromString(""));
    this.set("feeCollector", Value.fromString(""));
    this.set("fee", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyOffering entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PropertyOffering entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PropertyOffering", id.toString(), this);
    }
  }

  static load(id: string): PropertyOffering | null {
    return changetype<PropertyOffering | null>(
      store.get("PropertyOffering", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get property(): string {
    let value = this.get("property");
    return value!.toString();
  }

  set property(value: string) {
    this.set("property", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get softCap(): BigInt {
    let value = this.get("softCap");
    return value!.toBigInt();
  }

  set softCap(value: BigInt) {
    this.set("softCap", Value.fromBigInt(value));
  }

  get presaleMaxInvestment(): BigInt {
    let value = this.get("presaleMaxInvestment");
    return value!.toBigInt();
  }

  set presaleMaxInvestment(value: BigInt) {
    this.set("presaleMaxInvestment", Value.fromBigInt(value));
  }

  get presaleMinInvestment(): BigInt {
    let value = this.get("presaleMinInvestment");
    return value!.toBigInt();
  }

  set presaleMinInvestment(value: BigInt) {
    this.set("presaleMinInvestment", Value.fromBigInt(value));
  }

  get maxInvestment(): BigInt {
    let value = this.get("maxInvestment");
    return value!.toBigInt();
  }

  set maxInvestment(value: BigInt) {
    this.set("maxInvestment", Value.fromBigInt(value));
  }

  get minInvestment(): BigInt {
    let value = this.get("minInvestment");
    return value!.toBigInt();
  }

  set minInvestment(value: BigInt) {
    this.set("minInvestment", Value.fromBigInt(value));
  }

  get presaleStart(): BigInt {
    let value = this.get("presaleStart");
    return value!.toBigInt();
  }

  set presaleStart(value: BigInt) {
    this.set("presaleStart", Value.fromBigInt(value));
  }

  get presaleEnd(): BigInt {
    let value = this.get("presaleEnd");
    return value!.toBigInt();
  }

  set presaleEnd(value: BigInt) {
    this.set("presaleEnd", Value.fromBigInt(value));
  }

  get saleStart(): BigInt {
    let value = this.get("saleStart");
    return value!.toBigInt();
  }

  set saleStart(value: BigInt) {
    this.set("saleStart", Value.fromBigInt(value));
  }

  get saleEnd(): BigInt {
    let value = this.get("saleEnd");
    return value!.toBigInt();
  }

  set saleEnd(value: BigInt) {
    this.set("saleEnd", Value.fromBigInt(value));
  }

  get investmentToken(): string {
    let value = this.get("investmentToken");
    return value!.toString();
  }

  set investmentToken(value: string) {
    this.set("investmentToken", Value.fromString(value));
  }

  get collector(): string {
    let value = this.get("collector");
    return value!.toString();
  }

  set collector(value: string) {
    this.set("collector", Value.fromString(value));
  }

  get feeCollector(): string {
    let value = this.get("feeCollector");
    return value!.toString();
  }

  set feeCollector(value: string) {
    this.set("feeCollector", Value.fromString(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }
}

export class PropertyUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("property", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PropertyUser entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PropertyUser", id.toString(), this);
    }
  }

  static load(id: string): PropertyUser | null {
    return changetype<PropertyUser | null>(store.get("PropertyUser", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get property(): string {
    let value = this.get("property");
    return value!.toString();
  }

  set property(value: string) {
    this.set("property", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Rent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("property", Value.fromString(""));
    this.set("user", Value.fromString(""));
    this.set("pendingRent", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Rent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Rent", id.toString(), this);
    }
  }

  static load(id: string): Rent | null {
    return changetype<Rent | null>(store.get("Rent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get property(): string {
    let value = this.get("property");
    return value!.toString();
  }

  set property(value: string) {
    this.set("property", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pendingRent(): BigInt {
    let value = this.get("pendingRent");
    return value!.toBigInt();
  }

  set pendingRent(value: BigInt) {
    this.set("pendingRent", Value.fromBigInt(value));
  }
}
