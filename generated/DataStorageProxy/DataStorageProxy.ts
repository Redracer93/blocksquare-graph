// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FreezeProperty extends ethereum.Event {
  get params(): FreezeProperty__Params {
    return new FreezeProperty__Params(this);
  }
}

export class FreezeProperty__Params {
  _event: FreezeProperty;

  constructor(event: FreezeProperty) {
    this._event = event;
  }

  get property(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get frozen(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransferPropertyToCP extends ethereum.Event {
  get params(): TransferPropertyToCP__Params {
    return new TransferPropertyToCP__Params(this);
  }
}

export class TransferPropertyToCP__Params {
  _event: TransferPropertyToCP;

  constructor(event: TransferPropertyToCP) {
    this._event = event;
  }

  get property(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get CP(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DataStorageProxy extends ethereum.SmartContract {
  static bind(address: Address): DataStorageProxy {
    return new DataStorageProxy("DataStorageProxy", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSystemFrozen(): boolean {
    let result = super.call("isSystemFrozen", "isSystemFrozen():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSystemFrozen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSystemFrozen", "isSystemFrozen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCPFrozen(cp: Address): boolean {
    let result = super.call("isCPFrozen", "isCPFrozen(address):(bool)", [
      ethereum.Value.fromAddress(cp)
    ]);

    return result[0].toBoolean();
  }

  try_isCPFrozen(cp: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCPFrozen", "isCPFrozen(address):(bool)", [
      ethereum.Value.fromAddress(cp)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPropTokenFrozen(property: Address): boolean {
    let result = super.call(
      "isPropTokenFrozen",
      "isPropTokenFrozen(address):(bool)",
      [ethereum.Value.fromAddress(property)]
    );

    return result[0].toBoolean();
  }

  try_isPropTokenFrozen(property: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPropTokenFrozen",
      "isPropTokenFrozen(address):(bool)",
      [ethereum.Value.fromAddress(property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRolesAddress(): Address {
    let result = super.call(
      "getRolesAddress",
      "getRolesAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRolesAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRolesAddress",
      "getRolesAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPropertiesFactoryAddress(): Address {
    let result = super.call(
      "getPropertiesFactoryAddress",
      "getPropertiesFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getPropertiesFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPropertiesFactoryAddress",
      "getPropertiesFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUsersAddress(): Address {
    let result = super.call(
      "getUsersAddress",
      "getUsersAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getUsersAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUsersAddress",
      "getUsersAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getGovernmentAddress(): Address {
    let result = super.call(
      "getGovernmentAddress",
      "getGovernmentAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGovernmentAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernmentAddress",
      "getGovernmentAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasSystemAdminRights(sender: Address): boolean {
    let result = super.call(
      "hasSystemAdminRights",
      "hasSystemAdminRights(address):(bool)",
      [ethereum.Value.fromAddress(sender)]
    );

    return result[0].toBoolean();
  }

  try_hasSystemAdminRights(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasSystemAdminRights",
      "hasSystemAdminRights(address):(bool)",
      [ethereum.Value.fromAddress(sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCertifiedPartnersAddress(): Address {
    let result = super.call(
      "getCertifiedPartnersAddress",
      "getCertifiedPartnersAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getCertifiedPartnersAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCertifiedPartnersAddress",
      "getCertifiedPartnersAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBlocksquareAddress(): Address {
    let result = super.call(
      "getBlocksquareAddress",
      "getBlocksquareAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getBlocksquareAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBlocksquareAddress",
      "getBlocksquareAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCPOfProperty(prop: Address): Address {
    let result = super.call(
      "getCPOfProperty",
      "getCPOfProperty(address):(address)",
      [ethereum.Value.fromAddress(prop)]
    );

    return result[0].toAddress();
  }

  try_getCPOfProperty(prop: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCPOfProperty",
      "getCPOfProperty(address):(address)",
      [ethereum.Value.fromAddress(prop)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isCertifiedPartner(addr: Address): boolean {
    let result = super.call(
      "isCertifiedPartner",
      "isCertifiedPartner(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );

    return result[0].toBoolean();
  }

  try_isCertifiedPartner(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCertifiedPartner",
      "isCertifiedPartner(address):(bool)",
      [ethereum.Value.fromAddress(addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canDistributeRent(cpWallet: Address): boolean {
    let result = super.call(
      "canDistributeRent",
      "canDistributeRent(address):(bool)",
      [ethereum.Value.fromAddress(cpWallet)]
    );

    return result[0].toBoolean();
  }

  try_canDistributeRent(cpWallet: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canDistributeRent",
      "canDistributeRent(address):(bool)",
      [ethereum.Value.fromAddress(cpWallet)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCPAdminOfProperty(admin: Address, property: Address): boolean {
    let result = super.call(
      "isCPAdminOfProperty",
      "isCPAdminOfProperty(address,address):(bool)",
      [ethereum.Value.fromAddress(admin), ethereum.Value.fromAddress(property)]
    );

    return result[0].toBoolean();
  }

  try_isCPAdminOfProperty(
    admin: Address,
    property: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCPAdminOfProperty",
      "isCPAdminOfProperty(address,address):(bool)",
      [ethereum.Value.fromAddress(admin), ethereum.Value.fromAddress(property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canEditProperty(wallet: Address, property: Address): boolean {
    let result = super.call(
      "canEditProperty",
      "canEditProperty(address,address):(bool)",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromAddress(property)]
    );

    return result[0].toBoolean();
  }

  try_canEditProperty(
    wallet: Address,
    property: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canEditProperty",
      "canEditProperty(address,address):(bool)",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromAddress(property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOceanPointContract(): Address {
    let result = super.call(
      "getOceanPointContract",
      "getOceanPointContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOceanPointContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOceanPointContract",
      "getOceanPointContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCertifiedPartnerFee(): BigInt {
    let result = super.call(
      "getCertifiedPartnerFee",
      "getCertifiedPartnerFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCertifiedPartnerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCertifiedPartnerFee",
      "getCertifiedPartnerFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLicencedIssuerFee(): BigInt {
    let result = super.call(
      "getLicencedIssuerFee",
      "getLicencedIssuerFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLicencedIssuerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLicencedIssuerFee",
      "getLicencedIssuerFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlocksquareFee(): BigInt {
    let result = super.call(
      "getBlocksquareFee",
      "getBlocksquareFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBlocksquareFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlocksquareFee",
      "getBlocksquareFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSpecialWallet(): Address {
    let result = super.call(
      "getSpecialWallet",
      "getSpecialWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSpecialWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSpecialWallet",
      "getSpecialWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isContractWhitelisted(cont: Address): boolean {
    let result = super.call(
      "isContractWhitelisted",
      "isContractWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(cont)]
    );

    return result[0].toBoolean();
  }

  try_isContractWhitelisted(cont: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isContractWhitelisted",
      "isContractWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(cont)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canTransferPropTokensTo(wallet: Address, property: Address): boolean {
    let result = super.call(
      "canTransferPropTokensTo",
      "canTransferPropTokensTo(address,address):(bool)",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromAddress(property)]
    );

    return result[0].toBoolean();
  }

  try_canTransferPropTokensTo(
    wallet: Address,
    property: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canTransferPropTokensTo",
      "canTransferPropTokensTo(address,address):(bool)",
      [ethereum.Value.fromAddress(wallet), ethereum.Value.fromAddress(property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get CP(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get users(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get specialWallet(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ChangeSpecialWalletCall extends ethereum.Call {
  get inputs(): ChangeSpecialWalletCall__Inputs {
    return new ChangeSpecialWalletCall__Inputs(this);
  }

  get outputs(): ChangeSpecialWalletCall__Outputs {
    return new ChangeSpecialWalletCall__Outputs(this);
  }
}

export class ChangeSpecialWalletCall__Inputs {
  _call: ChangeSpecialWalletCall;

  constructor(call: ChangeSpecialWalletCall) {
    this._call = call;
  }

  get specialWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeSpecialWalletCall__Outputs {
  _call: ChangeSpecialWalletCall;

  constructor(call: ChangeSpecialWalletCall) {
    this._call = call;
  }
}

export class ChangeFactoryCall extends ethereum.Call {
  get inputs(): ChangeFactoryCall__Inputs {
    return new ChangeFactoryCall__Inputs(this);
  }

  get outputs(): ChangeFactoryCall__Outputs {
    return new ChangeFactoryCall__Outputs(this);
  }
}

export class ChangeFactoryCall__Inputs {
  _call: ChangeFactoryCall;

  constructor(call: ChangeFactoryCall) {
    this._call = call;
  }

  get factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeFactoryCall__Outputs {
  _call: ChangeFactoryCall;

  constructor(call: ChangeFactoryCall) {
    this._call = call;
  }
}

export class ChangeRolesCall extends ethereum.Call {
  get inputs(): ChangeRolesCall__Inputs {
    return new ChangeRolesCall__Inputs(this);
  }

  get outputs(): ChangeRolesCall__Outputs {
    return new ChangeRolesCall__Outputs(this);
  }
}

export class ChangeRolesCall__Inputs {
  _call: ChangeRolesCall;

  constructor(call: ChangeRolesCall) {
    this._call = call;
  }

  get roles(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRolesCall__Outputs {
  _call: ChangeRolesCall;

  constructor(call: ChangeRolesCall) {
    this._call = call;
  }
}

export class ChangeUsersCall extends ethereum.Call {
  get inputs(): ChangeUsersCall__Inputs {
    return new ChangeUsersCall__Inputs(this);
  }

  get outputs(): ChangeUsersCall__Outputs {
    return new ChangeUsersCall__Outputs(this);
  }
}

export class ChangeUsersCall__Inputs {
  _call: ChangeUsersCall;

  constructor(call: ChangeUsersCall) {
    this._call = call;
  }

  get users(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeUsersCall__Outputs {
  _call: ChangeUsersCall;

  constructor(call: ChangeUsersCall) {
    this._call = call;
  }
}

export class ChangeGovernmentContractCall extends ethereum.Call {
  get inputs(): ChangeGovernmentContractCall__Inputs {
    return new ChangeGovernmentContractCall__Inputs(this);
  }

  get outputs(): ChangeGovernmentContractCall__Outputs {
    return new ChangeGovernmentContractCall__Outputs(this);
  }
}

export class ChangeGovernmentContractCall__Inputs {
  _call: ChangeGovernmentContractCall;

  constructor(call: ChangeGovernmentContractCall) {
    this._call = call;
  }

  get government(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeGovernmentContractCall__Outputs {
  _call: ChangeGovernmentContractCall;

  constructor(call: ChangeGovernmentContractCall) {
    this._call = call;
  }
}

export class ChangeCertifiedPartnersCall extends ethereum.Call {
  get inputs(): ChangeCertifiedPartnersCall__Inputs {
    return new ChangeCertifiedPartnersCall__Inputs(this);
  }

  get outputs(): ChangeCertifiedPartnersCall__Outputs {
    return new ChangeCertifiedPartnersCall__Outputs(this);
  }
}

export class ChangeCertifiedPartnersCall__Inputs {
  _call: ChangeCertifiedPartnersCall;

  constructor(call: ChangeCertifiedPartnersCall) {
    this._call = call;
  }

  get certifiedPartners(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeCertifiedPartnersCall__Outputs {
  _call: ChangeCertifiedPartnersCall;

  constructor(call: ChangeCertifiedPartnersCall) {
    this._call = call;
  }
}

export class ChangeOceanPointContractCall extends ethereum.Call {
  get inputs(): ChangeOceanPointContractCall__Inputs {
    return new ChangeOceanPointContractCall__Inputs(this);
  }

  get outputs(): ChangeOceanPointContractCall__Outputs {
    return new ChangeOceanPointContractCall__Outputs(this);
  }
}

export class ChangeOceanPointContractCall__Inputs {
  _call: ChangeOceanPointContractCall;

  constructor(call: ChangeOceanPointContractCall) {
    this._call = call;
  }

  get oceanPoint(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOceanPointContractCall__Outputs {
  _call: ChangeOceanPointContractCall;

  constructor(call: ChangeOceanPointContractCall) {
    this._call = call;
  }
}

export class ChangeWhitelistedContractCall extends ethereum.Call {
  get inputs(): ChangeWhitelistedContractCall__Inputs {
    return new ChangeWhitelistedContractCall__Inputs(this);
  }

  get outputs(): ChangeWhitelistedContractCall__Outputs {
    return new ChangeWhitelistedContractCall__Outputs(this);
  }
}

export class ChangeWhitelistedContractCall__Inputs {
  _call: ChangeWhitelistedContractCall;

  constructor(call: ChangeWhitelistedContractCall) {
    this._call = call;
  }

  get contr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get isWhitelisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeWhitelistedContractCall__Outputs {
  _call: ChangeWhitelistedContractCall;

  constructor(call: ChangeWhitelistedContractCall) {
    this._call = call;
  }
}

export class ChangeFeesCall extends ethereum.Call {
  get inputs(): ChangeFeesCall__Inputs {
    return new ChangeFeesCall__Inputs(this);
  }

  get outputs(): ChangeFeesCall__Outputs {
    return new ChangeFeesCall__Outputs(this);
  }
}

export class ChangeFeesCall__Inputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }

  get licencedIssuerFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get blocksquareFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get certifiedPartnerFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeFeesCall__Outputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }
}

export class ChangeBlocksquareAddressCall extends ethereum.Call {
  get inputs(): ChangeBlocksquareAddressCall__Inputs {
    return new ChangeBlocksquareAddressCall__Inputs(this);
  }

  get outputs(): ChangeBlocksquareAddressCall__Outputs {
    return new ChangeBlocksquareAddressCall__Outputs(this);
  }
}

export class ChangeBlocksquareAddressCall__Inputs {
  _call: ChangeBlocksquareAddressCall;

  constructor(call: ChangeBlocksquareAddressCall) {
    this._call = call;
  }

  get blocksquare(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeBlocksquareAddressCall__Outputs {
  _call: ChangeBlocksquareAddressCall;

  constructor(call: ChangeBlocksquareAddressCall) {
    this._call = call;
  }
}

export class AddPropertyToCPCall extends ethereum.Call {
  get inputs(): AddPropertyToCPCall__Inputs {
    return new AddPropertyToCPCall__Inputs(this);
  }

  get outputs(): AddPropertyToCPCall__Outputs {
    return new AddPropertyToCPCall__Outputs(this);
  }
}

export class AddPropertyToCPCall__Inputs {
  _call: AddPropertyToCPCall;

  constructor(call: AddPropertyToCPCall) {
    this._call = call;
  }

  get prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddPropertyToCPCall__Outputs {
  _call: AddPropertyToCPCall;

  constructor(call: AddPropertyToCPCall) {
    this._call = call;
  }
}

export class ChangePropertyToCPCall extends ethereum.Call {
  get inputs(): ChangePropertyToCPCall__Inputs {
    return new ChangePropertyToCPCall__Inputs(this);
  }

  get outputs(): ChangePropertyToCPCall__Outputs {
    return new ChangePropertyToCPCall__Outputs(this);
  }
}

export class ChangePropertyToCPCall__Inputs {
  _call: ChangePropertyToCPCall;

  constructor(call: ChangePropertyToCPCall) {
    this._call = call;
  }

  get prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangePropertyToCPCall__Outputs {
  _call: ChangePropertyToCPCall;

  constructor(call: ChangePropertyToCPCall) {
    this._call = call;
  }
}

export class FreezeSystemCall extends ethereum.Call {
  get inputs(): FreezeSystemCall__Inputs {
    return new FreezeSystemCall__Inputs(this);
  }

  get outputs(): FreezeSystemCall__Outputs {
    return new FreezeSystemCall__Outputs(this);
  }
}

export class FreezeSystemCall__Inputs {
  _call: FreezeSystemCall;

  constructor(call: FreezeSystemCall) {
    this._call = call;
  }
}

export class FreezeSystemCall__Outputs {
  _call: FreezeSystemCall;

  constructor(call: FreezeSystemCall) {
    this._call = call;
  }
}

export class UnfreezeSystemCall extends ethereum.Call {
  get inputs(): UnfreezeSystemCall__Inputs {
    return new UnfreezeSystemCall__Inputs(this);
  }

  get outputs(): UnfreezeSystemCall__Outputs {
    return new UnfreezeSystemCall__Outputs(this);
  }
}

export class UnfreezeSystemCall__Inputs {
  _call: UnfreezeSystemCall;

  constructor(call: UnfreezeSystemCall) {
    this._call = call;
  }
}

export class UnfreezeSystemCall__Outputs {
  _call: UnfreezeSystemCall;

  constructor(call: UnfreezeSystemCall) {
    this._call = call;
  }
}

export class FreezeCPCall extends ethereum.Call {
  get inputs(): FreezeCPCall__Inputs {
    return new FreezeCPCall__Inputs(this);
  }

  get outputs(): FreezeCPCall__Outputs {
    return new FreezeCPCall__Outputs(this);
  }
}

export class FreezeCPCall__Inputs {
  _call: FreezeCPCall;

  constructor(call: FreezeCPCall) {
    this._call = call;
  }

  get cp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezeCPCall__Outputs {
  _call: FreezeCPCall;

  constructor(call: FreezeCPCall) {
    this._call = call;
  }
}

export class UnfreezeCPCall extends ethereum.Call {
  get inputs(): UnfreezeCPCall__Inputs {
    return new UnfreezeCPCall__Inputs(this);
  }

  get outputs(): UnfreezeCPCall__Outputs {
    return new UnfreezeCPCall__Outputs(this);
  }
}

export class UnfreezeCPCall__Inputs {
  _call: UnfreezeCPCall;

  constructor(call: UnfreezeCPCall) {
    this._call = call;
  }

  get cp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnfreezeCPCall__Outputs {
  _call: UnfreezeCPCall;

  constructor(call: UnfreezeCPCall) {
    this._call = call;
  }
}

export class FreezePropertyCall extends ethereum.Call {
  get inputs(): FreezePropertyCall__Inputs {
    return new FreezePropertyCall__Inputs(this);
  }

  get outputs(): FreezePropertyCall__Outputs {
    return new FreezePropertyCall__Outputs(this);
  }
}

export class FreezePropertyCall__Inputs {
  _call: FreezePropertyCall;

  constructor(call: FreezePropertyCall) {
    this._call = call;
  }

  get prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FreezePropertyCall__Outputs {
  _call: FreezePropertyCall;

  constructor(call: FreezePropertyCall) {
    this._call = call;
  }
}

export class UnfreezePropertyCall extends ethereum.Call {
  get inputs(): UnfreezePropertyCall__Inputs {
    return new UnfreezePropertyCall__Inputs(this);
  }

  get outputs(): UnfreezePropertyCall__Outputs {
    return new UnfreezePropertyCall__Outputs(this);
  }
}

export class UnfreezePropertyCall__Inputs {
  _call: UnfreezePropertyCall;

  constructor(call: UnfreezePropertyCall) {
    this._call = call;
  }

  get prop(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnfreezePropertyCall__Outputs {
  _call: UnfreezePropertyCall;

  constructor(call: UnfreezePropertyCall) {
    this._call = call;
  }
}
