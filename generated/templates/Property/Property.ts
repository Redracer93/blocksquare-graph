// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CapitalStackChange extends ethereum.Event {
  get params(): CapitalStackChange__Params {
    return new CapitalStackChange__Params(this);
  }
}

export class CapitalStackChange__Params {
  _event: CapitalStackChange;

  constructor(event: CapitalStackChange) {
    this._event = event;
  }

  get property(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenizationAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get commonEquity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get preferredEquity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mezzanine(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get juniorDebt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get seniorDebt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Property__getBasicInfoResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: string;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    return map;
  }
}

export class Property__getCapitalStackResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Property__getPropertyResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;
  value4: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: string,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Property extends ethereum.SmartContract {
  static bind(address: Address): Property {
    return new Property("Property", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnAndMint(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "burnAndMint",
      "burnAndMint(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_burnAndMint(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "burnAndMint",
      "burnAndMint(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canBeMinted(): boolean {
    let result = super.call("canBeMinted", "canBeMinted():(bool)", []);

    return result[0].toBoolean();
  }

  try_canBeMinted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("canBeMinted", "canBeMinted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contractBurn(user: Address, amount: BigInt): boolean {
    let result = super.call(
      "contractBurn",
      "contractBurn(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_contractBurn(
    user: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "contractBurn",
      "contractBurn(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBasicInfo(): Property__getBasicInfoResult {
    let result = super.call(
      "getBasicInfo",
      "getBasicInfo():(string,string,uint256,uint256,string)",
      []
    );

    return new Property__getBasicInfoResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString()
    );
  }

  try_getBasicInfo(): ethereum.CallResult<Property__getBasicInfoResult> {
    let result = super.tryCall(
      "getBasicInfo",
      "getBasicInfo():(string,string,uint256,uint256,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Property__getBasicInfoResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString()
      )
    );
  }

  getCapitalStack(): Property__getCapitalStackResult {
    let result = super.call(
      "getCapitalStack",
      "getCapitalStack():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new Property__getCapitalStackResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getCapitalStack(): ethereum.CallResult<Property__getCapitalStackResult> {
    let result = super.tryCall(
      "getCapitalStack",
      "getCapitalStack():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Property__getCapitalStackResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getIPFSHash(): string {
    let result = super.call("getIPFSHash", "getIPFSHash():(string)", []);

    return result[0].toString();
  }

  try_getIPFSHash(): ethereum.CallResult<string> {
    let result = super.tryCall("getIPFSHash", "getIPFSHash():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getMintContract(): Address {
    let result = super.call(
      "getMintContract",
      "getMintContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMintContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMintContract",
      "getMintContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOceanPointContract(): Address {
    let result = super.call(
      "getOceanPointContract",
      "getOceanPointContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getOceanPointContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOceanPointContract",
      "getOceanPointContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProperty(index: BigInt): Property__getPropertyResult {
    let result = super.call(
      "getProperty",
      "getProperty(uint64):(string,string,string,string,uint64)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return new Property__getPropertyResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt()
    );
  }

  try_getProperty(
    index: BigInt
  ): ethereum.CallResult<Property__getPropertyResult> {
    let result = super.tryCall(
      "getProperty",
      "getProperty(uint64):(string,string,string,string,uint64)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Property__getPropertyResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt()
      )
    );
  }

  getRoyaltyPercentage(): i32 {
    let result = super.call(
      "getRoyaltyPercentage",
      "getRoyaltyPercentage():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_getRoyaltyPercentage(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getRoyaltyPercentage",
      "getRoyaltyPercentage():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(accounts: Array<Address>, amounts: Array<BigInt>): boolean {
    let result = super.call("mint", "mint(address[],uint256[]):(bool)", [
      ethereum.Value.fromAddressArray(accounts),
      ethereum.Value.fromUnsignedBigIntArray(amounts)
    ]);

    return result[0].toBoolean();
  }

  try_mint(
    accounts: Array<Address>,
    amounts: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address[],uint256[]):(bool)", [
      ethereum.Value.fromAddressArray(accounts),
      ethereum.Value.fromUnsignedBigIntArray(amounts)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get propertyRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddRoyaltyPercentageCall extends ethereum.Call {
  get inputs(): AddRoyaltyPercentageCall__Inputs {
    return new AddRoyaltyPercentageCall__Inputs(this);
  }

  get outputs(): AddRoyaltyPercentageCall__Outputs {
    return new AddRoyaltyPercentageCall__Outputs(this);
  }
}

export class AddRoyaltyPercentageCall__Inputs {
  _call: AddRoyaltyPercentageCall;

  constructor(call: AddRoyaltyPercentageCall) {
    this._call = call;
  }

  get royaltyPercentage(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class AddRoyaltyPercentageCall__Outputs {
  _call: AddRoyaltyPercentageCall;

  constructor(call: AddRoyaltyPercentageCall) {
    this._call = call;
  }
}

export class AllowMintCall extends ethereum.Call {
  get inputs(): AllowMintCall__Inputs {
    return new AllowMintCall__Inputs(this);
  }

  get outputs(): AllowMintCall__Outputs {
    return new AllowMintCall__Outputs(this);
  }
}

export class AllowMintCall__Inputs {
  _call: AllowMintCall;

  constructor(call: AllowMintCall) {
    this._call = call;
  }
}

export class AllowMintCall__Outputs {
  _call: AllowMintCall;

  constructor(call: AllowMintCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnAndMintCall extends ethereum.Call {
  get inputs(): BurnAndMintCall__Inputs {
    return new BurnAndMintCall__Inputs(this);
  }

  get outputs(): BurnAndMintCall__Outputs {
    return new BurnAndMintCall__Outputs(this);
  }
}

export class BurnAndMintCall__Inputs {
  _call: BurnAndMintCall;

  constructor(call: BurnAndMintCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnAndMintCall__Outputs {
  _call: BurnAndMintCall;

  constructor(call: BurnAndMintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeCapitalStackCall extends ethereum.Call {
  get inputs(): ChangeCapitalStackCall__Inputs {
    return new ChangeCapitalStackCall__Inputs(this);
  }

  get outputs(): ChangeCapitalStackCall__Outputs {
    return new ChangeCapitalStackCall__Outputs(this);
  }
}

export class ChangeCapitalStackCall__Inputs {
  _call: ChangeCapitalStackCall;

  constructor(call: ChangeCapitalStackCall) {
    this._call = call;
  }

  get cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get commonEquity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get preferredEquity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mezzanine(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get juniorDebt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get seniorDebt(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ChangeCapitalStackCall__Outputs {
  _call: ChangeCapitalStackCall;

  constructor(call: ChangeCapitalStackCall) {
    this._call = call;
  }
}

export class ChangeLICall extends ethereum.Call {
  get inputs(): ChangeLICall__Inputs {
    return new ChangeLICall__Inputs(this);
  }

  get outputs(): ChangeLICall__Outputs {
    return new ChangeLICall__Outputs(this);
  }
}

export class ChangeLICall__Inputs {
  _call: ChangeLICall;

  constructor(call: ChangeLICall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeLICall__Outputs {
  _call: ChangeLICall;

  constructor(call: ChangeLICall) {
    this._call = call;
  }
}

export class ChangeTokenNameAndSymbolCall extends ethereum.Call {
  get inputs(): ChangeTokenNameAndSymbolCall__Inputs {
    return new ChangeTokenNameAndSymbolCall__Inputs(this);
  }

  get outputs(): ChangeTokenNameAndSymbolCall__Outputs {
    return new ChangeTokenNameAndSymbolCall__Outputs(this);
  }
}

export class ChangeTokenNameAndSymbolCall__Inputs {
  _call: ChangeTokenNameAndSymbolCall;

  constructor(call: ChangeTokenNameAndSymbolCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeTokenNameAndSymbolCall__Outputs {
  _call: ChangeTokenNameAndSymbolCall;

  constructor(call: ChangeTokenNameAndSymbolCall) {
    this._call = call;
  }
}

export class ContractBurnCall extends ethereum.Call {
  get inputs(): ContractBurnCall__Inputs {
    return new ContractBurnCall__Inputs(this);
  }

  get outputs(): ContractBurnCall__Outputs {
    return new ContractBurnCall__Outputs(this);
  }
}

export class ContractBurnCall__Inputs {
  _call: ContractBurnCall;

  constructor(call: ContractBurnCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ContractBurnCall__Outputs {
  _call: ContractBurnCall;

  constructor(call: ContractBurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class FreezeTokenCall extends ethereum.Call {
  get inputs(): FreezeTokenCall__Inputs {
    return new FreezeTokenCall__Inputs(this);
  }

  get outputs(): FreezeTokenCall__Outputs {
    return new FreezeTokenCall__Outputs(this);
  }
}

export class FreezeTokenCall__Inputs {
  _call: FreezeTokenCall;

  constructor(call: FreezeTokenCall) {
    this._call = call;
  }
}

export class FreezeTokenCall__Outputs {
  _call: FreezeTokenCall;

  constructor(call: FreezeTokenCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBurnContractCall extends ethereum.Call {
  get inputs(): SetBurnContractCall__Inputs {
    return new SetBurnContractCall__Inputs(this);
  }

  get outputs(): SetBurnContractCall__Outputs {
    return new SetBurnContractCall__Outputs(this);
  }
}

export class SetBurnContractCall__Inputs {
  _call: SetBurnContractCall;

  constructor(call: SetBurnContractCall) {
    this._call = call;
  }

  get burnContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBurnContractCall__Outputs {
  _call: SetBurnContractCall;

  constructor(call: SetBurnContractCall) {
    this._call = call;
  }
}

export class SetMintContractCall extends ethereum.Call {
  get inputs(): SetMintContractCall__Inputs {
    return new SetMintContractCall__Inputs(this);
  }

  get outputs(): SetMintContractCall__Outputs {
    return new SetMintContractCall__Outputs(this);
  }
}

export class SetMintContractCall__Inputs {
  _call: SetMintContractCall;

  constructor(call: SetMintContractCall) {
    this._call = call;
  }

  get mintContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMintContractCall__Outputs {
  _call: SetMintContractCall;

  constructor(call: SetMintContractCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnfreezeTokenCall extends ethereum.Call {
  get inputs(): UnfreezeTokenCall__Inputs {
    return new UnfreezeTokenCall__Inputs(this);
  }

  get outputs(): UnfreezeTokenCall__Outputs {
    return new UnfreezeTokenCall__Outputs(this);
  }
}

export class UnfreezeTokenCall__Inputs {
  _call: UnfreezeTokenCall;

  constructor(call: UnfreezeTokenCall) {
    this._call = call;
  }
}

export class UnfreezeTokenCall__Outputs {
  _call: UnfreezeTokenCall;

  constructor(call: UnfreezeTokenCall) {
    this._call = call;
  }
}
